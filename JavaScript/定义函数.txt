js:

    在JavaScript中，定义函数的方式如下：

    function abs(x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    }

    上述abs()函数的定义如下：

    function指出这是一个函数定义；
    abs是函数的名称；
    (x)括号内列出函数的参数，多个参数以,分隔；
    { ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。
    请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

    如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

    由于JavaScript的函数也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。

    var abs = function (x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    };


arguments
JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。


变量提升:

    JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：


全局作用域:

    不在任何函数内定义的变量就具有全局作用域。


this：
    
    始终指向当前对象，this.属性 拿到的是当前对象的属性

    var that = this  在方法内部定义其他函数时，其他函数需要调用属性中的值，先用that捕获this，再用that进行调用

    apply：函数本身调用apply方法，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
    function getAge() {
        var y = new Date().getFullYear();
        return y - this.birth;
    }

    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: getAge
    };

    xiaoming.age(); // 25
    getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空